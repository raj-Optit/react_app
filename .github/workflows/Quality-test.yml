# This workflow will build a node-Js application, and cache/restore any dependencies to improve the workflow execution time
# Create the secret DOCKER_HUB_USERNAME, DOCKER_HUB_USERNAME, SONAR_PROJECT_KEY, SONAR_ORGANIZATION_KEY and SONAR_TOKEN

name: GitHub Action Node Js application

on:
  push:
    branches:
    - master
    - release/*"
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Build and test the Node-Js application
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Setup Node.js environment
      uses: actions/setup-node@v4.0.3
      with:
        node-version: '14'
        
    - name: Build with npm
      run: |
        npm install
        npm run build

    - name: Unit test with npm
      run: npm test 
      
    
  SAST:
    name: Static Application Security Testing (SAST) 
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v3
    
    - name: Scan with SonarCloud (SAST)
      uses: SonarSource/sonarcloud-github-action@v2.3.0
      env:
        SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
      with:
          # Optionally, you can pass properties directly via arguments if needed and keep repo as private
          args: |
            -Dsonar.projectKey=${{ secrets.SONAR_PROJECT_KEY }}
            -Dsonar.organization=${{ secrets.SONAR_ORGANIZATION_KEY }}
            -Dsonar.host.url=https://sonarcloud.io
            -Dsonar.login=${{ secrets.SONAR_TOKEN }}

  Docker:
    name: Docker Build and Image Scan
    runs-on: ubuntu-latest
    needs: [build, SAST]
    steps:
    - uses: actions/checkout@v3
    
    - name: Docker Login
      uses: docker/login-action@v3.3.0
      with:
          # Username used to log against the Docker registry
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
         # Password or personal access token used to log against the Docker registry
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}
         # Log out from the Docker registry at the end of a job
        #logout: false
        
    - name: Build and Tag Docker image
      run: docker build -t ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-application:${{ github.sha }} .

    - name: Scan Docker Image with Trivy
      run: |
        trivy image --severity CRITICAL,HIGH --format table --output trivy-report.txt ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-application:${{ github.sha }}
    #- name: Scan Docker Image with Trivy
      #uses: aquasecurity/trivy-action@0.24.0
      #with:
        #image-ref: ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-application:${{ github.sha }}
      #env:
        #TRIVY_SEVERITY: CRITICAL,HIGH
        #TRIVY_EXIT_CODE: 1  # Fail the build if vulnerabilities are found
        
    - name: Push Docker Image to DockerHub      
      run: |
          docker push ${{ secrets.DOCKER_HUB_USERNAME }}/nodejs-application:${{ github.sha }}
